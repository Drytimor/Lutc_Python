# локальные имена распознаются статически
"""
x = 99
def selector():"""
    # нашел x в глобальной области видимости
""" print(x)

selector()"""

"""
x = 99

def selector():"""
    # когда мы явно объявляем переменную в локальной области видимости
    # x будет интерпретироваться как локальная переменная, а не глобальная,
    # а пре попытки вывести x перед ее объявлением приведет к ошибке
""" print(x)
    x = 88
selector()"""
"""
def saver(x=[]):
    x.append(1)
    return x, id(x)"""
# стандартные изменяемые объекты в параметрах функций
# сохраняют состояние между вызовами, изменяя объект на месте,
# а не создают каждый раз новый объект

# список растет
"""
print(saver())"""  # 4559996864 [1]
"""
print(saver()) """  # 4559996864 [1, 1]
"""
print(saver())"""  # 4559996864 [1, 1, 1]
# если использовать пользовательский аргумент он создаст новый объект
"""
print(saver([0]))"""   # 4351954880 [0, 1]
"""
print(saver())"""  # 4341794752 [1, 1, 1, 1]

# что бы сбрасывать список в пустое состояние
# необходимо в теле функции при каждом вызове
# создавать копию стандартного значения
"""
def saver(x=None):
    if x is None:
        x = []
    x.append(1)
    return x, id(x)

"""
# список не растет
"""
print(saver())"""  # ([1], 4373651520)
"""
print(saver())"""  # ([1], 4373651520)
"""
print(saver())"""  # ([1], 4373651520)

