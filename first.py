# Модуль - это программный код и данные предназначенный для многократного использования

# архитектура python
# - файл верхнего уровня содержит главный поток управления программы
# - файл импортирует модуль для получения доступа к его атрибутам(имена переменных -
# присоединяемые к таким объектам как функции, классы)

# доступ к пространству имен через __dict__


# Модуль - пакеты имен
# м.е. места, где создаются имена (атрибуты)
# модуль представляет собой одиночную область видимости (глобальную), содержащий атрибуты


# когда модуль импортируется в первый раз python выполняет его операторы от начала до конца
# после того как модуль был загружен его глобальная область видимости становиться словарем атрибутов
# объекта модуля и продолжает существовать после окончания операции импортирования

"""
x = 1
y = [1,2]
"""
# оператор import присваивает одиночному имени объект целого модуля
# оператор from присваивает одному или нескольким именам объекты с такими же именами из другого модуля

# FROM
"""
from module import name1, name2"""
# эквивалентно
"""
import module
name1 = module.name1
name2 = module.name2"""

# from копирует целый модуль в память независимо от того сколько имен было передано

# from копирует указанные имена
# при использовании from копируются имена содержащие ссылки
# на объекты, если объект является изменяемым,
# то изменения объекта в области видимости импортера
# так же изменит объект в импортированном модуле
# при использовании from не существует никакой связи с неизменяемыми типа данных

# from может искажать пространство имен, если в импортере и импортируемом модуле
# будут одинаковые имена, тот будет работать имя которе встретилось позже в программе,
# что бы избежать этого используется оператор as который дает псевдонимы

# IMPORT
# при использовании import независимо от изменяемости объекта
# изменения объекта в импортере - изменит объект в импортируемом модуле




# python выполняет импортирование только один раз, затем извлечения объектов выполняется уже из загруженного модуля
# и если изменить атрибуты в импортируемом модуле, на модуле импортере это не повлияет
# т.е модуль импортер будет использовать старые объекты которые были загружены ранее
# что бы обновить модуль - существует функция - reload

# функция - reload применяется для динамической настойки, делает возможным
# изменения частей программы без остановки все программы
# она переписывает пространство имен на месте, не удаляя и не воссоздавая его
# reload перезапишет атрибуты только тех модулей который используют оператор import
# так импорт передает объект модуля, но reload не перезапишет атрибуты тех модулей, где
# используется оператор from т.к он создает копии объектов



# Лексическая область видимости
# f() не изменит глобальную переменную Х в second.py
# а только изменит глобальную переменную Х в first.py

# операции импортирования никогда не восходящую область видимости
# импортируемый файл не может видеть имена из файла, в который он импортируется


# first.py
"""
x = 88
def f():
    global x
    x = 100
"""
# second.py
"""
x = 11
import first
"""
# f() не изменит глобальную переменную Х в second.py
# а только изменит глобальную переменную Х в first.py
"""
first.f()"""
"""
print(x, first.x)"""  # 11 100

# относительное импортирование
# необходимо обязательно применять оператор .
# указание того что требуется модуль внутри того же самого пакета
# from . import second
# будет искаться модуль только внутри каталога пакета и не искать модули с теми же именами
# находящихся в других местах в рамках путей sys.path - это значит,
# что модули пакета перезапишут внешние модули


# абсолютное импортирование
# оператор import всегда пропускает относительный каталог, сразу переходя на абсолютный путь
# import string
# будет пропущен относительный путь, поиск будет сразу в абсолютных каталогах которые содержаться в sys.path
# что бы поиск начинался с относительного пути в том же каталоге необходимо указать это напрямую
# from . import string


import string







