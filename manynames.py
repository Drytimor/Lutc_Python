x = 11  # глобальная переменная, атрибут модуля

#  вызов функции f() в модуле импортере выведет х сохраненную в этом модуле - лексическое присваивание

def f():
    print(x)  # 11 # доступ к глобальному имени

def g():
    x = 22  # локальная переменная, скрывает глобальную переменную
    print(x)  # 22

class C:
    x = 33 # атрибут класса C.x
def m(self):
    x = 44  # локальная переменная в методе
    self.x = 55  # атрибут экземпляра obj.x

x = 1

def nester():
    print(x)  # глобальная переменная 1
    class C:
        print(x)  # глобальная переменная 1
        def method(self):
            print(x)  # глобальная переменная 1
        def method2(self):
            x = 3  # скрывает глобальную переменную
            print(x)  # локальная переменная х = 3
    i = C()
    i.method()
    i.method2()

x = 1

def nester():
    x = 2   # создание локального имени х будет найдена в этой области видимости и не пойдет дальше в глобальную
    print(x)  # локальная переменная 2
    class C:
        print(x)  # локальная переменная 2
        def method(self):
            print(x)  # локальная переменная 2
        def method2(self):
            x = 3  # скрывает локальную переменную 2
            print(x)  # локальная переменная х = 3
    i = C()
    i.method()
    i.method2()

def nester():
    x = 2  # скрывает глобальную переменную
    print(x)  # локальная переменная 2
    class C:
        x = 3  # локальная переменная из класса скрывает имя из nester
        print(x)  # локальная переменная 3
        def method(self):
            print(x)  # пропускает локальную переменную от класса, выводит объемлющую переменную из nester - 2
            print(self.x)  # унаследованная переменная из класса - 3
        def method2(self):
            x = 4  # скрывает переменную из объемлющей области видимости
            print(x)  # локальная переменная 4
            self.x = 5  # скрывает имя из класса
            print(self.x)  # находится в экземпляре

    i = C()
    i.method()
    i.method2()

# переменные во вложенных функциях никогда не ищутся в объемлющих классах только в функциях

if __name__ == '__main__':
    print(x)
    nester()

